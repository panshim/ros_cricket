# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lwr_controllers/CartesianImpedancePoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lwr_controllers.msg
import geometry_msgs.msg
import std_msgs.msg

class CartesianImpedancePoint(genpy.Message):
  _md5sum = "71b8c728a99ddb73ba603776d4733a5f"
  _type = "lwr_controllers/CartesianImpedancePoint"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
# 1. If frame_id in header is NOT EMPTY, then x_FRI is considered to be the pose w.r.t. that frame, so the increment w.r.t. the current tip pose will be computed internally (in the teach pendant is equivalent to select the Cartesian increments to be in the WORLD frame) 
# 2. If frame_id in header is EMPTY, then x_FRI is considered to be the pose w.r.t. to the current tip pose (in the teach pendant is equivalent to select the Cartesian increments to be in the TOOL frame)
# The increment (or offset) is x_FRI
geometry_msgs/Pose x_FRI
# The stiffness, damping and wrench are expressed in the current tip frame readed in the HWiface
lwr_controllers/Stiffness k_FRI
lwr_controllers/Stiffness d_FRI
geometry_msgs/Wrench f_FRI
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: lwr_controllers/Stiffness
# This represents a diagonal Cartesian stiffness
# It is motivated by the KDL class: http://people.mech.kuleuven.be/~rsmits/kdl/api/html/classKDL_1_1Stiffness.html
# The conversion would be straight-forward, however, a generic 6D stiffness matrix would be desirable

float64 x
float64 y
float64 z
float64 rx
float64 ry
float64 rz
================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','x_FRI','k_FRI','d_FRI','f_FRI']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','lwr_controllers/Stiffness','lwr_controllers/Stiffness','geometry_msgs/Wrench']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,x_FRI,k_FRI,d_FRI,f_FRI

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CartesianImpedancePoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x_FRI is None:
        self.x_FRI = geometry_msgs.msg.Pose()
      if self.k_FRI is None:
        self.k_FRI = lwr_controllers.msg.Stiffness()
      if self.d_FRI is None:
        self.d_FRI = lwr_controllers.msg.Stiffness()
      if self.f_FRI is None:
        self.f_FRI = geometry_msgs.msg.Wrench()
    else:
      self.header = std_msgs.msg.Header()
      self.x_FRI = geometry_msgs.msg.Pose()
      self.k_FRI = lwr_controllers.msg.Stiffness()
      self.d_FRI = lwr_controllers.msg.Stiffness()
      self.f_FRI = geometry_msgs.msg.Wrench()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_25d().pack(_x.x_FRI.position.x, _x.x_FRI.position.y, _x.x_FRI.position.z, _x.x_FRI.orientation.x, _x.x_FRI.orientation.y, _x.x_FRI.orientation.z, _x.x_FRI.orientation.w, _x.k_FRI.x, _x.k_FRI.y, _x.k_FRI.z, _x.k_FRI.rx, _x.k_FRI.ry, _x.k_FRI.rz, _x.d_FRI.x, _x.d_FRI.y, _x.d_FRI.z, _x.d_FRI.rx, _x.d_FRI.ry, _x.d_FRI.rz, _x.f_FRI.force.x, _x.f_FRI.force.y, _x.f_FRI.force.z, _x.f_FRI.torque.x, _x.f_FRI.torque.y, _x.f_FRI.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x_FRI is None:
        self.x_FRI = geometry_msgs.msg.Pose()
      if self.k_FRI is None:
        self.k_FRI = lwr_controllers.msg.Stiffness()
      if self.d_FRI is None:
        self.d_FRI = lwr_controllers.msg.Stiffness()
      if self.f_FRI is None:
        self.f_FRI = geometry_msgs.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 200
      (_x.x_FRI.position.x, _x.x_FRI.position.y, _x.x_FRI.position.z, _x.x_FRI.orientation.x, _x.x_FRI.orientation.y, _x.x_FRI.orientation.z, _x.x_FRI.orientation.w, _x.k_FRI.x, _x.k_FRI.y, _x.k_FRI.z, _x.k_FRI.rx, _x.k_FRI.ry, _x.k_FRI.rz, _x.d_FRI.x, _x.d_FRI.y, _x.d_FRI.z, _x.d_FRI.rx, _x.d_FRI.ry, _x.d_FRI.rz, _x.f_FRI.force.x, _x.f_FRI.force.y, _x.f_FRI.force.z, _x.f_FRI.torque.x, _x.f_FRI.torque.y, _x.f_FRI.torque.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_25d().pack(_x.x_FRI.position.x, _x.x_FRI.position.y, _x.x_FRI.position.z, _x.x_FRI.orientation.x, _x.x_FRI.orientation.y, _x.x_FRI.orientation.z, _x.x_FRI.orientation.w, _x.k_FRI.x, _x.k_FRI.y, _x.k_FRI.z, _x.k_FRI.rx, _x.k_FRI.ry, _x.k_FRI.rz, _x.d_FRI.x, _x.d_FRI.y, _x.d_FRI.z, _x.d_FRI.rx, _x.d_FRI.ry, _x.d_FRI.rz, _x.f_FRI.force.x, _x.f_FRI.force.y, _x.f_FRI.force.z, _x.f_FRI.torque.x, _x.f_FRI.torque.y, _x.f_FRI.torque.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.x_FRI is None:
        self.x_FRI = geometry_msgs.msg.Pose()
      if self.k_FRI is None:
        self.k_FRI = lwr_controllers.msg.Stiffness()
      if self.d_FRI is None:
        self.d_FRI = lwr_controllers.msg.Stiffness()
      if self.f_FRI is None:
        self.f_FRI = geometry_msgs.msg.Wrench()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 200
      (_x.x_FRI.position.x, _x.x_FRI.position.y, _x.x_FRI.position.z, _x.x_FRI.orientation.x, _x.x_FRI.orientation.y, _x.x_FRI.orientation.z, _x.x_FRI.orientation.w, _x.k_FRI.x, _x.k_FRI.y, _x.k_FRI.z, _x.k_FRI.rx, _x.k_FRI.ry, _x.k_FRI.rz, _x.d_FRI.x, _x.d_FRI.y, _x.d_FRI.z, _x.d_FRI.rx, _x.d_FRI.ry, _x.d_FRI.rz, _x.f_FRI.force.x, _x.f_FRI.force.y, _x.f_FRI.force.z, _x.f_FRI.torque.x, _x.f_FRI.torque.y, _x.f_FRI.torque.z,) = _get_struct_25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_25d = None
def _get_struct_25d():
    global _struct_25d
    if _struct_25d is None:
        _struct_25d = struct.Struct("<25d")
    return _struct_25d
